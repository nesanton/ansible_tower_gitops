---
### Variables
#
# Set the following variables on host_vars/localhost or group_vars/all
#
# - controller_validate_certs:
#     description: |
#                  Wether to trust self-signed or invalid certificates
#                  Falls back to env CONTROLLER_VERIFY_SSL and then to awx-cli config.
#
# - controller_hostname:
#     description: |
#                  Hostname of AWX or Red Hat Ansible Automation Platform Controller.
#                  Falls back to env CONTROLLER_HOST and then to awx-cli config.
#
# - controller_username:
#     description: |
#                  Username for AWX or Red Hat Ansible Automation Platform Controller.
#                  Falls back to env CONTROLLER_USERNAME and then to awx-cli config.
#
# - controller_password:
#     description: |
#                  Password for AWX or Red Hat Ansible Automation Platform Controller.
#                  Falls back to env CONTROLLER_PASSWORD and then to awx-cli config.
#
# - controller_wait_for_availability:
#     description: |
#                  Wether to check & wait for controller availability.
#                  Falls back to env CONTROLLER_WAIT_FOR_AVAILABILITY.
#                  Will wait if one of: true (boolean), 'true', 'True', 'yes', 'Yes', '1'
#                  Otherwise availability check is skipped.
#
# - controller_configs_dir:
#     description: |
#                  Directory with Controller configs.
#                  Falls back to env CONTROLLER_CONFIGS_DIR.
#                  Defaults to $PWD/configs
#


- name: Playbook to configure ansible Controller post installation
  hosts: localhost
  connection: local
  collections:
    - awx.awx
    - redhat_cop.controller_configuration
  pre_tasks:

    - name: Wait for Controller to come up
      block:
        - name: Ensure controller is responding
          uri:
            url: "{{ controller_hostname }}/api/v2/ping"
            status_code: 200
          register: result
          until: result.status == 200
          retries: 80
          delay: 30
          ignore_errors: true

        - name: Sleep for 60 seconds and allow Controller to come up.
          wait_for:
            timeout: 60
          delegate_to: localhost
      when: controller_wait_for_availability | default(lookup('env', 'CONTROLLER_WAIT_FOR_AVAILABILITY')) in [true, 'true', 'True', 'yes', 'Yes', '1']

    - name: Include vars from configs directory
      include_vars:
        dir: "{{ controller_configs_dir | default((lookup('env','CONTROLLER_CONFIGS_DIR') == '') | ternary('./configs', lookup('env','CONTROLLER_CONFIGS_DIR'))) }}"
        ignore_files: [controller_config.yml.template]
        extensions: ["yml"]
      tags:
        - always

  roles:
    - {role: settings, when: controller_settings is defined, tags: settings}
    - {role: organizations, when: controller_organizations is defined, tags: organizations}
    - {role: labels, when: controller_labels is defined, tags: labels}
    - {role: users, when: controller_user_accounts is defined, tags: users}
    - {role: teams, when: controller_teams is defined, tags: teams}
    - {role: credential_types, when: controller_credential_types is defined, tags: credential_types}
    - {role: credentials, when: controller_credentials is defined, tags: credentials}
    - {role: credential_input_sources, when: controller_credential_input_sources is defined, tags: credential_input_sources}
    - {role: notification_templates, when: controller_notifications is defined, tags: notification_templates}
    - {role: projects, when: controller_projects is defined, tags: projects}
    - {role: execution_environments, when: controller_execution_environments is defined, tags: execution_environments}
    - {role: applications, when: controller_applications is defined, tags: applications}
    - {role: inventories, when: controller_inventories is defined, tags: inventories}
    - {role: instance_groups, when: controller_instance_groups is defined, tags: instance_groups}
    - {role: project_update, when: controller_projects is defined, tags: projects}
    - {role: inventory_sources, when: controller_inventory_sources is defined, tags: inventory_sources}
    - {role: inventory_source_update, when: controller_inventory_sources is defined, tags: inventory_sources}
    - {role: hosts, when: controller_hosts is defined, tags: hosts}
    - {role: groups, when: controller_groups is defined, tags: inventories}
    - {role: job_templates, when: controller_templates is defined, tags: job_templates}
    - {role: workflow_job_templates, when: controller_workflows is defined, tags: workflow_job_templates}
    - {role: schedules, when: controller_schedules is defined, tags: schedules}
    - {role: roles, when: controller_roles is defined, tags: roles}

  tasks:

    - name: Add Controller Settings Individually
      include_role:
        name: settings
      vars:
        controller_settings: "{{ controller_settings_individuale }}"
      when: controller_settings_individuale is defined

    - name: Run ad hoc commands
      include_role:
        name: ad_hoc_command
      when: controller_ad_hoc_commands is defined

    - name: Cancel Ad hoc commands
      include_tasks: "./tasks/ad_hoc_cancel.yml"
      when: controller_ad_hoc_commands is defined

    - name: Launch Controller Jobs
      include_role:
        name: job_launch
      when: controller_launch_jobs is defined

    - name: Show launched Controller jobs
      debug:
        var: launched_controller_jobs

    - name: Cancel Controller Jobs
      include_role:
        name: jobs_cancel
      vars:
        controller_cancel_jobs: "{{ launched_controller_jobs.results }}"
      when: launched_controller_jobs is defined

    - name: Launch Controller workflows
      include_role:
        name: workflow_launch
      when: controller_workflow_launch_jobs is defined
...
